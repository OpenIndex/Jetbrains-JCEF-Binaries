name: build

on:
  workflow_dispatch:
    inputs:
      macos_arm64:
        description: "Build for MacOS arm64"
        required: true
        default: true
        type: boolean

      macos_x64:
        description: "Build for MacOS x64"
        required: true
        default: true
        type: boolean

      linux_x64:
        description: "Build for Linux x64"
        required: true
        default: true
        type: boolean

      windows_x64:
        description: "Build for Windows x64"
        required: true
        default: true
        type: boolean

jobs:
  bundle:
    strategy:
      matrix:
        os: [ macos-latest, macos-13, ubuntu-latest, windows-latest ]
        exclude:
          - os: ${{ !inputs.macos_arm64 && 'macos-latest' }}
          - os: ${{ !inputs.macos_x64 && 'macos-13' }}
          - os: ${{ !inputs.linux_x64 && 'ubuntu-latest' }}
          - os: ${{ !inputs.windows_x64 && 'windows-2019' }}
      fail-fast: false

    runs-on: ${{ matrix.os }}
    steps:
      - name: Dependencies for Linux x64
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          sudo apt-get update
          sudo apt-get -y install ant git gcc cmake bison flex pkg-config
          sudo apt-get -y install libx11-dev

      - name: Setup Python for Windows x64
        uses: LizardByte/setup-python-action@master
        if: ${{ matrix.os == 'windows-2019' }}
        with:
          python-version: '2.7'

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'jetbrains'
          java-version: '21'

      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          repository: 'JetBrains/jcef'

      - name: Build for Linux x64
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          ./jb/tools/linux/build.sh all x86_64

      - name: Build for MacOS x64
        if: ${{ matrix.os == 'macos-13' }}
        run: |
          ./jb/tools/mac/build.sh all x86_64

      - name: Build for MacOS arm64
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          ./jb/tools/mac/build.sh all arm64

      - name: Build for Windows x64
        if: ${{ matrix.os == 'windows-2019' }}
        env:
          VS160COMNTOOLS: 'C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/Common7/Tools'
          ANT_HOME: 'C:/ProgramData/Chocolatey/bin/ant'
          JCEF_CMAKE: 'C:/Program Files/CMake/bin/cmake'
          PYTHON_27_PATH: 'C:/tmp/python27/venv/Scripts/python'
        run: |
          cd jb\tools\windows
          cmd /c build.bat all x86_64

      - name: Listing
        shell: bash
        run: |
          echo ""
          echo "-------------------"
          echo " DIRECTORY LISTING"
          echo "-------------------"
          echo "ROOT:"
          ls -1
          echo "-------------------"
          echo "OUT:"
          ls -1 out
          echo "-------------------"
          echo ""

      - name: Upload linux-x64 packages
        uses: actions/upload-artifact@v4
        if: ${{ matrix.os == 'ubuntu-latest' }}
        with:
          name: jetbrains-jcef-linux-x64
          path: |
            ./*.tar.gz
            ./out/linux64/*.jar

      - name: Upload macos-x64 packages
        uses: actions/upload-artifact@v4
        if: ${{ matrix.os == 'macos-13' }}
        with:
          name: jetbrains-jcef-macos-x64
          path: |
            ./*.tar.gz
            ./jcef_build/native/Release/*.jar

      - name: Upload macos-arm64 packages
        uses: actions/upload-artifact@v4
        if: ${{ matrix.os == 'macos-latest' }}
        with:
          name: jetbrains-jcef-macos-arm64
          path: |
            ./*.tar.gz
            ./jcef_build/native/Release/*.jar
